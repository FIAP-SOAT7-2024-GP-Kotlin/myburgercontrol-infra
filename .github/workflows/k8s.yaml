name: Deployk8s

on:
  workflow_dispatch:

jobs:
  deploy-k8s:
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: doadmin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN_ACCESS }}

      - name: Get db user and host
        run: |
          PG_DB_ID=$(doctl db list | grep pg | awk '{print $1}')
          PG_DB_PASS=$(doctl -format Password --no-header)
          PG_DB_HOST=$(doctl databases connection $PG_DB_ID --format Host --no-header)
          echo "PG_DB_HOST"=$PG_DB_HOST >> $GITHUB_ENV
          echo "PG_DB_PASS=$PG_DB_PASS" >> $GITHUB_ENV

          MONGO_DB_ID=$(doctl db list | grep mongo | awk '{print $1}')
          MONGO_DB_PASS=$(doctl databases user get $MONGO_DB_ID $DATABASE_USER --format Password --no-header)
          MONGO_DB_HOST=$(doctl databases connection $MONGO_DB_ID --format URI --no-header)
          echo "MONGO_DB_HOST"=$MONGO_DB_HOST >> $GITHUB_ENV
          echo "MONGO_DB_PASS=$MONGO_DB_PASS" >> $GITHUB_ENV

      - name: Save kubeconfig
        run: |
          K8S_CLUSTER_NAME=`doctl kubernetes cluster list --no-header --format Name`
          doctl kubernetes cluster kubeconfig save $K8S_CLUSTER_NAME

      - name: Kube Apply
        env:
          PG_DB_PASS: ${{ env.PG_DB_PASS }}
          MONGO_DB_PASS: ${{ env.MONGO_DB_PASS }}
        run: |
          mkdir tmp
          echo "PG_DB_PASS=$PG_DB_PASS"
          echo "MONGO_DB_PASS=$MONGO_DB_PASS"
          sed 's/#PG_DATABASE_PASSWORD#/'"$PG_DB_PASS"'/g; s/#MONGO_DATABASE_PASSWORD#/'"$MONGO_DB_PASS"'/g' k8s/app/myburger-secret-template.yaml > tmp/myburger-secret.yaml
          kubectl apply -f k8s/app/myburger-configmap.yaml
          kubectl apply -f tmp/myburger-secret.yaml
          kubectl apply -f k8s/app/myburger--order-deployment.yaml --wait=true
          kubectl apply -f k8s/app/myburger-hpa.yaml
          kubectl apply -f k8s/app/myburger-svc.yaml --wait=true

      - name: Wait for LoadBalancer
        run: |
          echo "Waiting for Service LoadBalancer to start"
          for i in {1..30}; do
            K8S_LB_IP=`kubectl get svc -o=jsonpath='{.items[?(@.spec.type=="LoadBalancer")].status.loadBalancer.ingress[0].ip}'`
            if [ ! -z "$K8S_LB_IP" ]; then
              echo "LoadBalancer started $K8S_LB_IP"
              exit 0
            fi

            sleep 20
          done
          echo "LoadBalancer failed to start"
