name: Deployk8s

on:
  workflow_run:
    workflows: [Terraform]
    types:
      - completed

jobs:
  deploy-k8s:
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: doadmin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN_ACCESS }}

      - name: Get db user and host
        run: |
          PG_DB_ID=$(doctl db list | grep pg | awk '{print $1}')
          PG_DB_PASS=$(doctl databases user get $PG_DB_ID $DATABASE_USER --format Password --no-header)
          PG_DB_HOST=$(doctl databases connection $PG_DB_ID --format Host --no-header)
          echo "PG_DB_HOST"=$PG_DB_HOST >> $GITHUB_ENV
          echo "PG_DB_PASS=$PG_DB_PASS" >> $GITHUB_ENV

          MONGO_DB_ID=$(doctl db list | grep mongo | awk '{print $1}')
          MONGO_DB_PASS=$(doctl databases user create $MONGO_DB_ID order-admin -o json >> mongo_password.txt && jq -r '.[0].password' mongo_password.txt)
          MONGODB_URI=$(doctl databases connection $MONGO_DB_ID --format URI --no-header)
          echo "MONGODB_URI"=$MONGODB_URI >> $GITHUB_ENV
          echo "MONGO_DB_PASS=$MONGO_DB_PASS" >> $GITHUB_ENV

      - name: Save kubeconfig
        run: |
          K8S_CLUSTER_NAME=`doctl kubernetes cluster list --no-header --format Name`
          doctl kubernetes cluster kubeconfig save $K8S_CLUSTER_NAME

      - name: Kube Apply
        env:
          PG_DB_PASS: ${{ env.PG_DB_PASS }}
          MONGO_DB_PASS: ${{ env.MONGO_DB_PASS }}
          MONGODB_URI: ${{ env.MONGODB_URI }}
          MONGODB_USER: order-admin
        run: |
          echo "PG_DB_PASS=$PG_DB_PASS"
          echo "MONGO_DB_PASS=${MONGO_DB_PASS}"

          UPDATED_MONGO_DB_URI=$(echo "${MONGODB_URI}" | sed "s|doadmin:@|admin:${MONGO_DB_PASS}@|")
          echo "UPDATED_MONGO_DB_URI=$UPDATED_MONGO_DB_URI"
          sed -i 's/#PG_DATABASE_PASSWORD#/'"$PG_DB_PASS"'/g; s/#MONGO_DATABASE_PASSWORD#/'"$MONGO_DB_PASS"'/g; s/#MONGO_DATABASE_USERNAME#/'"$MONGODB_USER"'/g' k8s/app/myburger-secret-template.yaml

          UPDATED_MONGO_DB_URI=$(echo "${UPDATED_MONGO_DB_URI}" | sed 's/[&/\]/\\&/g')
          sed -i "s|#MONGODB_URI#|${UPDATED_MONGO_DB_URI}|g" k8s/app/myburger-configmap.yaml

          cat k8s/app/myburger-configmap.yaml
          cat k8s/app/myburger-secret.yaml

          kubectl apply -f k8s/app/myburger-secret.yaml
          kubectl apply -f k8s/app/myburger-configmap.yaml
          kubectl apply -f k8s/app/myburger-order-deployment.yaml --wait=true
          kubectl apply -f k8s/app/myburger-payment-deployment.yaml --wait=true
          kubectl apply -f k8s/app/myburger-hpa.yaml
          kubectl apply -f k8s/app/myburger-order-svc.yaml --wait=true
          kubectl apply -f k8s/app/myburger-payment-svc.yaml --wait=true

      - name: Wait for LoadBalancer
        run: |
          echo "Waiting for Service LoadBalancer to start"
          required_ips=2  # Número de IPs necessários
          for i in {1..30}; do
            K8S_LB_IPS=($(kubectl get svc -o=jsonpath='{.items[?(@.spec.type=="LoadBalancer")].status.loadBalancer.ingress[*].ip}'))
            if [ ${#K8S_LB_IPS[@]} -ge $required_ips ]; then
              echo "LoadBalancer started with IPs: ${K8S_LB_IPS[@]}"
              exit 0
            fi

            sleep 20
          done
          echo "LoadBalancer failed to start"

